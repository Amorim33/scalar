{
  "openapi": "3.0.1",
  "info": {
    "title": "eChecklist API",
    "description": "<p>An API for the Company EHF - Epping Hermann Fischer Patentanwaltsgesellschaft mbH.</p><p>The eChecklist application is an enhancement to the existing automated systems at EHF Company. This application aims to simplify and accelerate the process of filling out checklists by enabling automated entries to a certain extent. It incorporates smart logic functions tailored to specific requirements and parameters. This reduces repetitive tasks and minimizes human intervention. The system is designed to save users time by providing a quick and efficient data entry method.</p><p>This documentation provides a comprehensive overview of all the application endpoints and their associated schemas. It is organized into categories, with each endpoint featuring a concise description that clarifies its purpose. Additionally, the required permissions for each endpoint are specified to ensure clear and secure use of the API.</p>",
    "termsOfService": "https://example.com/terms",
    "contact": {
      "name": "Contact to Developer - (c) 2023 by Hochschule Osnabr√ºck",
      "url": "https://www.hs-osnabrueck.de"
    },
    "license": {
      "name": "Proprietary License",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://localhost:7184"
    }
  ],
  "paths": {
    "/api/checklists": {
      "get": {
        "tags": [
          "Checklists"
        ],
        "summary": "Retrieves all checklists.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Gets or sets the page number for the pagination filter.\r\nThis property is used to navigate through the pages of the results.\r\nFor example, if PageNumber is set to 2, the second page of results will be returned.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the page size for the pagination filter.\r\nThis property determines the number of results per page.\r\nFor example, if PageSize is set to 25, each page of results will contain 25 items.\r\nThe default value is 25.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Gets or sets the order by fields for the pagination filter.\r\nThis property is used to sort the results based on one or more fields.\r\nThe fields are specified as an array of strings, where each string is the name of a field.\r\nFor example, if OrderBy is set to [\"Name\", \"Age\"], the results will be sorted first by Name, and then by Age.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "AdvancedSearch.Fields",
            "in": "query",
            "description": "Represents the list of fields to be searched.\r\nThis property is a list of strings, where each string is the name of a field to be searched.\r\nThe search operation will look for the keyword in these fields.\r\nFor example, if Fields is set to [\"Name\", \"Description\"], the search operation will look for the keyword in the Name and Description fields.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "AdvancedSearch.Keyword",
            "in": "query",
            "description": "Keyword to be used in the search operation.\r\nIt represents the value to be searched in the specified fields.\r\nThe search operation will look for this keyword in the fields specified by the Fields property.\r\nFor example, if Keyword is set to \"John\", the search operation will look for \"John\" in the specified fields.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keyword",
            "in": "query",
            "description": "Gets or sets the keyword for the search.\r\nThis property is used to perform a simple search where the keyword is searched in all available columns of the resource.\r\nFor example, if the keyword is 'John', it will return all resources where any of the columns contain 'John'.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Logic",
            "in": "query",
            "description": "Gets or sets the logic operator for the filter.\r\nThis is used when combining multiple filters.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Filters",
            "in": "query",
            "description": "Gets or sets the list of filters to be applied.\r\nThis allows for complex filtering scenarios where multiple filters are combined.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          {
            "name": "AdvancedFilter.Field",
            "in": "query",
            "description": "Gets or sets the field to be filtered.\r\nThis is the property of the object that the filter will be applied to.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Operator",
            "in": "query",
            "description": "Gets or sets the operator to be used in the filter.\r\nThis defines the type of comparison to be made between the field and the value.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Value",
            "in": "query",
            "description": "Gets or sets the value to be used in the filter.\r\nThis is what the field will be compared to.",
            "style": "form",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all checklists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistOverviewDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Checklists"
        ],
        "summary": "Creates and saves a checklist.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistCreationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created checklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/checklists/{id}": {
      "get": {
        "tags": [
          "Checklists"
        ],
        "summary": "Retrieves a checklist by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a checklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Checklists"
        ],
        "summary": "Creates and saves a checklist.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the created checklist"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "Checklists"
        ],
        "summary": "Checks if an element change should hide or show other elements.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistElementValueUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a list of elements and show-booleans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistElementShowDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Checklists"
        ],
        "summary": "Deletes a checklist.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checklist successfully deleted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/checklisttemplate": {
      "get": {
        "tags": [
          "ChecklistTemplate"
        ],
        "summary": "Retrieves all checklist template overviews.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Gets or sets the page number for the pagination filter.\r\nThis property is used to navigate through the pages of the results.\r\nFor example, if PageNumber is set to 2, the second page of results will be returned.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the page size for the pagination filter.\r\nThis property determines the number of results per page.\r\nFor example, if PageSize is set to 25, each page of results will contain 25 items.\r\nThe default value is 25.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Gets or sets the order by fields for the pagination filter.\r\nThis property is used to sort the results based on one or more fields.\r\nThe fields are specified as an array of strings, where each string is the name of a field.\r\nFor example, if OrderBy is set to [\"Name\", \"Age\"], the results will be sorted first by Name, and then by Age.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "AdvancedSearch.Fields",
            "in": "query",
            "description": "Represents the list of fields to be searched.\r\nThis property is a list of strings, where each string is the name of a field to be searched.\r\nThe search operation will look for the keyword in these fields.\r\nFor example, if Fields is set to [\"Name\", \"Description\"], the search operation will look for the keyword in the Name and Description fields.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "AdvancedSearch.Keyword",
            "in": "query",
            "description": "Keyword to be used in the search operation.\r\nIt represents the value to be searched in the specified fields.\r\nThe search operation will look for this keyword in the fields specified by the Fields property.\r\nFor example, if Keyword is set to \"John\", the search operation will look for \"John\" in the specified fields.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keyword",
            "in": "query",
            "description": "Gets or sets the keyword for the search.\r\nThis property is used to perform a simple search where the keyword is searched in all available columns of the resource.\r\nFor example, if the keyword is 'John', it will return all resources where any of the columns contain 'John'.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Logic",
            "in": "query",
            "description": "Gets or sets the logic operator for the filter.\r\nThis is used when combining multiple filters.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Filters",
            "in": "query",
            "description": "Gets or sets the list of filters to be applied.\r\nThis allows for complex filtering scenarios where multiple filters are combined.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          {
            "name": "AdvancedFilter.Field",
            "in": "query",
            "description": "Gets or sets the field to be filtered.\r\nThis is the property of the object that the filter will be applied to.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Operator",
            "in": "query",
            "description": "Gets or sets the operator to be used in the filter.\r\nThis defines the type of comparison to be made between the field and the value.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Value",
            "in": "query",
            "description": "Gets or sets the value to be used in the filter.\r\nThis is what the field will be compared to.",
            "style": "form",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all checklist template overviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistTemplateOverviewDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "ChecklistTemplate"
        ],
        "summary": "Creates and saves a checklist template.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistTemplateCreationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created checklist template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistTemplateDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/checklisttemplate/{id}": {
      "get": {
        "tags": [
          "ChecklistTemplate"
        ],
        "summary": "Retrieves a checklist template by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a checklist template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistTemplateDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "ChecklistTemplate"
        ],
        "summary": "Updates a checklist template.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistTemplateUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated checklist template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistTemplateDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "ChecklistTemplate"
        ],
        "summary": "Deletes a checklist template by its id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Checklist template successfully deleted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/profile/me": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "GetProfileAsync is an HTTP GET method that retrieves the profile of the current user.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Retrieves all roles.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Registers a new role.",
        "requestBody": {
          "description": "The details of the role to register.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateRoleDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateRoleDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/roles/search": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Searches for roles based on the provided filter criteria.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Gets or sets the page number for the pagination filter.\r\nThis property is used to navigate through the pages of the results.\r\nFor example, if PageNumber is set to 2, the second page of results will be returned.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the page size for the pagination filter.\r\nThis property determines the number of results per page.\r\nFor example, if PageSize is set to 25, each page of results will contain 25 items.\r\nThe default value is 25.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Gets or sets the order by fields for the pagination filter.\r\nThis property is used to sort the results based on one or more fields.\r\nThe fields are specified as an array of strings, where each string is the name of a field.\r\nFor example, if OrderBy is set to [\"Name\", \"Age\"], the results will be sorted first by Name, and then by Age.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "AdvancedSearch.Fields",
            "in": "query",
            "description": "Represents the list of fields to be searched.\r\nThis property is a list of strings, where each string is the name of a field to be searched.\r\nThe search operation will look for the keyword in these fields.\r\nFor example, if Fields is set to [\"Name\", \"Description\"], the search operation will look for the keyword in the Name and Description fields.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "AdvancedSearch.Keyword",
            "in": "query",
            "description": "Keyword to be used in the search operation.\r\nIt represents the value to be searched in the specified fields.\r\nThe search operation will look for this keyword in the fields specified by the Fields property.\r\nFor example, if Keyword is set to \"John\", the search operation will look for \"John\" in the specified fields.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keyword",
            "in": "query",
            "description": "Gets or sets the keyword for the search.\r\nThis property is used to perform a simple search where the keyword is searched in all available columns of the resource.\r\nFor example, if the keyword is 'John', it will return all resources where any of the columns contain 'John'.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Logic",
            "in": "query",
            "description": "Gets or sets the logic operator for the filter.\r\nThis is used when combining multiple filters.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Filters",
            "in": "query",
            "description": "Gets or sets the list of filters to be applied.\r\nThis allows for complex filtering scenarios where multiple filters are combined.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          {
            "name": "AdvancedFilter.Field",
            "in": "query",
            "description": "Gets or sets the field to be filtered.\r\nThis is the property of the object that the filter will be applied to.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Operator",
            "in": "query",
            "description": "Gets or sets the operator to be used in the filter.\r\nThis defines the type of comparison to be made between the field and the value.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Value",
            "in": "query",
            "description": "Gets or sets the value to be used in the filter.\r\nThis is what the field will be compared to.",
            "style": "form",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Retrieves a role by its unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the role to retrieve.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Deletes a role.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the role to delete.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/roles/{id}/permissions": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Retrieves a role by its unique identifier along with its permissions.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the role to retrieve.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Updates the permissions of a role.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the role to update.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The list of permissions to assign to the role.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves a list of all users.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/search": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Searches for users based on the provided filter criteria.",
        "parameters": [
          {
            "name": "IsActive",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Gets or sets the page number for the pagination filter.\r\nThis property is used to navigate through the pages of the results.\r\nFor example, if PageNumber is set to 2, the second page of results will be returned.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the page size for the pagination filter.\r\nThis property determines the number of results per page.\r\nFor example, if PageSize is set to 25, each page of results will contain 25 items.\r\nThe default value is 25.",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "Gets or sets the order by fields for the pagination filter.\r\nThis property is used to sort the results based on one or more fields.\r\nThe fields are specified as an array of strings, where each string is the name of a field.\r\nFor example, if OrderBy is set to [\"Name\", \"Age\"], the results will be sorted first by Name, and then by Age.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "AdvancedSearch.Fields",
            "in": "query",
            "description": "Represents the list of fields to be searched.\r\nThis property is a list of strings, where each string is the name of a field to be searched.\r\nThe search operation will look for the keyword in these fields.\r\nFor example, if Fields is set to [\"Name\", \"Description\"], the search operation will look for the keyword in the Name and Description fields.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "AdvancedSearch.Keyword",
            "in": "query",
            "description": "Keyword to be used in the search operation.\r\nIt represents the value to be searched in the specified fields.\r\nThe search operation will look for this keyword in the fields specified by the Fields property.\r\nFor example, if Keyword is set to \"John\", the search operation will look for \"John\" in the specified fields.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Keyword",
            "in": "query",
            "description": "Gets or sets the keyword for the search.\r\nThis property is used to perform a simple search where the keyword is searched in all available columns of the resource.\r\nFor example, if the keyword is 'John', it will return all resources where any of the columns contain 'John'.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Logic",
            "in": "query",
            "description": "Gets or sets the logic operator for the filter.\r\nThis is used when combining multiple filters.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Filters",
            "in": "query",
            "description": "Gets or sets the list of filters to be applied.\r\nThis allows for complex filtering scenarios where multiple filters are combined.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Filter"
              }
            }
          },
          {
            "name": "AdvancedFilter.Field",
            "in": "query",
            "description": "Gets or sets the field to be filtered.\r\nThis is the property of the object that the filter will be applied to.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Operator",
            "in": "query",
            "description": "Gets or sets the operator to be used in the filter.\r\nThis defines the type of comparison to be made between the field and the value.",
            "style": "form",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AdvancedFilter.Value",
            "in": "query",
            "description": "Gets or sets the value to be used in the filter.\r\nThis is what the field will be compared to.",
            "style": "form",
            "schema": { }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves a user by their unique identifier.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to retrieve.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/{id}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a user by ID and shows all associated roles.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user whose roles to retrieve.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user's roles.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user whose roles will be updated.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "A list of roles to be assigned to the user.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/users/{id}/toggle-active": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Toggles a user's active state.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user whose active state will be toggled.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "activateUser",
            "in": "query",
            "description": "A boolean value indicating whether to activate the user.",
            "style": "form",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Checklist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "caseNumber": {
            "type": "string",
            "nullable": true
          },
          "isCompleted": {
            "type": "boolean"
          },
          "checklistTemplateId": {
            "type": "string",
            "format": "uuid"
          },
          "checklistTemplate": {
            "$ref": "#/components/schemas/ChecklistTemplate"
          },
          "checklistElementValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistElementValue"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistConstraint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ConstraintType"
          },
          "constraintOneId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "constraintOne": {
            "$ref": "#/components/schemas/ChecklistConstraint"
          },
          "livingOneConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistConstraint"
            },
            "nullable": true
          },
          "constraintTwoId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "constraintTwo": {
            "$ref": "#/components/schemas/ChecklistConstraint"
          },
          "livingTwoConstraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistConstraint"
            },
            "nullable": true
          },
          "constraintBoolOperation": {
            "$ref": "#/components/schemas/ConstraintBoolOperation"
          },
          "constraintElementId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "constraintElement": {
            "$ref": "#/components/schemas/ChecklistElement"
          },
          "checklistElementId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checklistElement": {
            "$ref": "#/components/schemas/ChecklistElement"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "clientSpecificInformationIdentifier": {
            "type": "string",
            "nullable": true
          },
          "operation": {
            "$ref": "#/components/schemas/ConstraintOperation"
          }
        },
        "additionalProperties": false
      },
      "ChecklistConstraintCreationDto": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConstraintType"
          },
          "operation": {
            "$ref": "#/components/schemas/ConstraintOperation"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "clientSpecificInformationIdentifier": {
            "type": "string",
            "nullable": true
          },
          "elementNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistConstraintDto": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ConstraintType"
          },
          "value": {
            "type": "string",
            "description": "the value to compare the element value to. This is used if the type is not CheckboxConstraint.",
            "nullable": true
          },
          "clientSpecificInformationIdentifier": {
            "type": "string",
            "description": "the identifier for where to find a value in the database. This is used if the type is ClientSpecificInformation.",
            "nullable": true
          },
          "operation": {
            "$ref": "#/components/schemas/ConstraintOperation"
          },
          "constraintElementId": {
            "type": "string",
            "description": "the ID of the element that holds the value to compare to. This is used if the type is Text-, Number-, Date- or CheckboxConstraint.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for a checklist constraint."
      },
      "ChecklistCreationDto": {
        "type": "object",
        "properties": {
          "checklistTemplateId": {
            "type": "string",
            "format": "uuid"
          },
          "caseNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistDto": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the checklist.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the checklist.",
            "nullable": true
          },
          "caseNumber": {
            "type": "string",
            "description": "The case number associated with the checklist, if any.",
            "nullable": true
          },
          "isCompleted": {
            "type": "boolean",
            "description": "Indicates whether the checklist is completed. If true, the checklist cannot be edited anymore."
          },
          "checklistTemplate": {
            "$ref": "#/components/schemas/ChecklistTemplateDto"
          },
          "checklistElementValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistElementValueDto"
            },
            "description": "The actual values of the elements in the checklist.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for a checklist."
      },
      "ChecklistElement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checklistTemplateId": {
            "type": "string",
            "format": "uuid"
          },
          "checklistTemplate": {
            "$ref": "#/components/schemas/ChecklistTemplate"
          },
          "allowedRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "parent": {
            "$ref": "#/components/schemas/ChecklistElement"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistElement"
            },
            "nullable": true
          },
          "constraint": {
            "$ref": "#/components/schemas/ChecklistConstraint"
          },
          "type": {
            "$ref": "#/components/schemas/ChecklistElementType"
          },
          "elementNumber": {
            "type": "integer",
            "format": "int32"
          },
          "autoDatabaseFillerPattern": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistElementCreationDto": {
        "type": "object",
        "properties": {
          "constraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistConstraintCreationDto"
            },
            "description": "The constraints determining if this element should be shown.",
            "nullable": true
          },
          "boolOperations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstraintBoolOperation"
            },
            "description": "The boolean operations connecting two constraints.",
            "nullable": true
          },
          "allowedRoles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The IDs of all roles allowed to edit this element.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ChecklistElementType"
          },
          "elementNumber": {
            "type": "integer",
            "description": "The number/index in the context of the template, which determines the element order.",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The title of the checklist element.",
            "nullable": true
          },
          "autoDatabaseFillerPattern": {
            "type": "string",
            "description": "The pattern for auto filling from database.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the checklist element.",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "description": "The placeholder text for the checklist element.",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "The label for the checklist element.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a DTO for creating a checklist element."
      },
      "ChecklistElementDto": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "the unique identifier for the checklist element.",
            "format": "uuid"
          },
          "allowedRoles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "the collection of unique identifiers for the roles allowed to edit this element.",
            "nullable": true
          },
          "constraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistConstraintDto"
            },
            "description": "the list of constraints determining if this element should be shown.",
            "nullable": true
          },
          "boolOperations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstraintBoolOperation"
            },
            "description": "the list of boolean operations connecting two constraints.",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ChecklistElementType"
          },
          "autoDatabaseFillerPattern": {
            "type": "string",
            "nullable": true
          },
          "elementNumber": {
            "type": "integer",
            "description": "the number/index of the element in the context of the template, which determines the element order.",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "the title of the checklist element.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "the description of the checklist element.",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "description": "the placeholder text for the checklist element.",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "the label for the checklist element.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for a checklist element."
      },
      "ChecklistElementShowDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "elementNumber": {
            "type": "integer",
            "format": "int32"
          },
          "show": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ChecklistElementState": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the state of a checklist element.",
        "format": "int32"
      },
      "ChecklistElementType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "ChecklistElementUpdateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "deleteThis": {
            "type": "boolean"
          },
          "constraints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistConstraintCreationDto"
            },
            "nullable": true
          },
          "boolOperations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConstraintBoolOperation"
            },
            "nullable": true
          },
          "allowedRoles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ChecklistElementType"
          },
          "elementNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "autoDatabaseFillerPattern": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "placeholder": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistElementValue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checklistId": {
            "type": "string",
            "format": "uuid"
          },
          "checklist": {
            "$ref": "#/components/schemas/Checklist"
          },
          "checklistElementId": {
            "type": "string",
            "format": "uuid"
          },
          "checklistElement": {
            "$ref": "#/components/schemas/ChecklistElement"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/ChecklistElementState"
          }
        },
        "additionalProperties": false
      },
      "ChecklistElementValueDto": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "checklistId": {
            "type": "string",
            "format": "uuid"
          },
          "checklistElementId": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/ChecklistElementState"
          }
        },
        "additionalProperties": false
      },
      "ChecklistElementValueUpdateDto": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 1500,
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ChecklistOverviewDto": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "caseNumber": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isCompleted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ChecklistTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "previousVersionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "previousVersion": {
            "$ref": "#/components/schemas/ChecklistTemplate"
          },
          "nextVersion": {
            "$ref": "#/components/schemas/ChecklistTemplate"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistElement"
            },
            "nullable": true
          },
          "checklists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Checklist"
            },
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "namePattern": {
            "type": "string",
            "nullable": true
          },
          "namePatternItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamePatternItem"
            },
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChecklistTemplateCreationDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 150,
            "minLength": 2,
            "type": "string",
            "nullable": true
          },
          "namePattern": {
            "maxLength": 150,
            "minLength": 2,
            "type": "string",
            "nullable": true
          },
          "namePatternItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistTemplateNamePatternItemDTO"
            },
            "nullable": true
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistElementCreationDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistTemplateDto": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the checklist template.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the checklist template.",
            "nullable": true
          },
          "namePattern": {
            "type": "string",
            "description": "The pattern for the default name of a created checklist.",
            "nullable": true
          },
          "namePatternItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistTemplateNamePatternItemDTO"
            },
            "description": "The Items defining the values to insert into name pattern.",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "description": "The version of the checklist template.",
            "format": "int32"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistElementDto"
            },
            "description": "The list of elements in the checklist template.",
            "nullable": true
          },
          "previousVersionId": {
            "type": "string",
            "description": "The unique identifier for the previous version of the checklist template, if it exists.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a data transfer object for a checklist template."
      },
      "ChecklistTemplateNamePatternItemDTO": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/NamePatternType"
          },
          "autoDatabaseFillerPattern": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistTemplateOverviewDto": {
        "type": "object",
        "properties": {
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChecklistTemplateUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 150,
            "minLength": 2,
            "type": "string",
            "nullable": true
          },
          "namePattern": {
            "maxLength": 150,
            "minLength": 2,
            "type": "string",
            "nullable": true
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChecklistElementUpdateDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChecklistUpdateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConstraintBoolOperation": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ConstraintOperation": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "ConstraintType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "CreateOrUpdateRoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Filter": {
        "type": "object",
        "properties": {
          "logic": {
            "type": "string",
            "description": "Gets or sets the logic operator for the filter.\r\nThis is used when combining multiple filters.",
            "nullable": true
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "Gets or sets the list of filters to be applied.\r\nThis allows for complex filtering scenarios where multiple filters are combined.",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "Gets or sets the field to be filtered.\r\nThis is the property of the object that the filter will be applied to.",
            "nullable": true
          },
          "operator": {
            "type": "string",
            "description": "Gets or sets the operator to be used in the filter.\r\nThis defines the type of comparison to be made between the field and the value.",
            "nullable": true
          },
          "value": {
            "description": "Gets or sets the value to be used in the filter.\r\nThis is what the field will be compared to.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a filter used in search operations.\r\nA filter consists of a field, an operator, and a value. The field is the property of the object to be filtered,\r\nthe operator defines the type of comparison to be made, and the value is what the field will be compared to."
      },
      "NamePatternItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "lastModifiedBy": {
            "type": "string",
            "format": "uuid"
          },
          "lastModifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "format": "uuid"
          },
          "template": {
            "$ref": "#/components/schemas/ChecklistTemplate"
          },
          "type": {
            "$ref": "#/components/schemas/NamePatternType"
          },
          "autoDatabaseFillerPattern": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NamePatternType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "normalizedName": {
            "type": "string",
            "nullable": true
          },
          "concurrencyStamp": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "checklistElementId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "checklistElement": {
            "$ref": "#/components/schemas/ChecklistElement"
          }
        },
        "additionalProperties": false
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "openIdConnect",
        "description": "OAuth2.0 Auth Code with PKCE"
      }
    }
  },
  "security": [
    {
      "oauth2": [
        "readAccess",
        "writeAccess"
      ]
    }
  ],
  "tags": [
    {
      "name": "Profile",
      "description": "ProfileController is a controller class that handles HTTP requests related to user profiles."
    },
    {
      "name": "Roles",
      "description": "Provides operations for managing roles."
    },
    {
      "name": "Users",
      "description": "UsersController is a controller that handles HTTP requests related to User entities."
    },
    {
      "name": "Checklists",
      "description": "Provides operations for managing checklists."
    },
    {
      "name": "ChecklistTemplate",
      "description": "Provides operations for managing checklist templates."
    }
  ]
}